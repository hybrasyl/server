// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.1.46.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace Hybrasyl.Xml
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Xml;
using System.Collections.Generic;

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
[Serializable]
[DebuggerStepThrough]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="http://www.hybrasyl.com/XML/Hybrasyl/2020-02")]
[XmlRootAttribute(Namespace="http://www.hybrasyl.com/XML/Hybrasyl/2020-02", IsNullable=false)]
public partial class Castable
{
    #region Private fields
    private List<Description> _descriptions;
    private string _name;
    private Categories _categories;
    private List<CastCost> _castCosts;
    private List<CastableIntent> _intents;
    private MaxLevel _maxLevel;
    private List<Requirement> _requirements;
    private CastableRestrictions _restrictions;
    private CastableEffects _effects;
    private string _script;
    private string _type;
    private byte _icon;
    private Book _book;
    private Element _element;
    private byte _lines;
    private List<Class> _class;
    private int _cooldown;
    private bool _isAssail;
    private bool _reflectable;
    private static XmlSerializer serializer;
    #endregion
    
    public Castable()
    {
        _class = new List<Class>();
        _effects = new CastableEffects();
        _restrictions = new CastableRestrictions();
        _requirements = new List<Requirement>();
        _maxLevel = new MaxLevel();
        _intents = new List<CastableIntent>();
        _castCosts = new List<CastCost>();
        _categories = new Categories();
        _descriptions = new List<Description>();
        _element = Element.None;
        _lines = ((byte)(0));
        _cooldown = 0;
        _isAssail = false;
        _reflectable = true;
    }
    
    [XmlArrayItemAttribute(IsNullable=false)]
    public List<Description> Descriptions
    {
        get
        {
            return _descriptions;
        }
        set
        {
            _descriptions = value;
        }
    }
    
    public string Name
    {
        get
        {
            return _name;
        }
        set
        {
            _name = value;
        }
    }
    
    public Categories Categories
    {
        get
        {
            return _categories;
        }
        set
        {
            _categories = value;
        }
    }
    
    [XmlArrayItemAttribute(IsNullable=false)]
    public List<CastCost> CastCosts
    {
        get
        {
            return _castCosts;
        }
        set
        {
            _castCosts = value;
        }
    }
    
    [XmlArrayItemAttribute("Intent", IsNullable=false)]
    public List<CastableIntent> Intents
    {
        get
        {
            return _intents;
        }
        set
        {
            _intents = value;
        }
    }
    
    public MaxLevel MaxLevel
    {
        get
        {
            return _maxLevel;
        }
        set
        {
            _maxLevel = value;
        }
    }
    
    [XmlArrayItemAttribute(IsNullable=false)]
    public List<Requirement> Requirements
    {
        get
        {
            return _requirements;
        }
        set
        {
            _requirements = value;
        }
    }
    
    public CastableRestrictions Restrictions
    {
        get
        {
            return _restrictions;
        }
        set
        {
            _restrictions = value;
        }
    }
    
    public CastableEffects Effects
    {
        get
        {
            return _effects;
        }
        set
        {
            _effects = value;
        }
    }
    
    public string Script
    {
        get
        {
            return _script;
        }
        set
        {
            _script = value;
        }
    }
    
    [XmlAttribute]
    public string Type
    {
        get
        {
            return _type;
        }
        set
        {
            _type = value;
        }
    }
    
    [XmlAttribute]
    public byte Icon
    {
        get
        {
            return _icon;
        }
        set
        {
            _icon = value;
        }
    }
    
    [XmlAttribute]
    public Book Book
    {
        get
        {
            return _book;
        }
        set
        {
            _book = value;
        }
    }
    
    [XmlAttribute]
    [DefaultValue(Element.None)]
    public Element Element
    {
        get
        {
            return _element;
        }
        set
        {
            _element = value;
        }
    }
    
    [XmlAttribute]
    [DefaultValue(typeof(byte), "0")]
    public byte Lines
    {
        get
        {
            return _lines;
        }
        set
        {
            _lines = value;
        }
    }
    
    [XmlAttribute]
    public List<Class> Class
    {
        get
        {
            return _class;
        }
        set
        {
            _class = value;
        }
    }
    
    [XmlAttribute]
    [DefaultValue(0)]
    public int Cooldown
    {
        get
        {
            return _cooldown;
        }
        set
        {
            _cooldown = value;
        }
    }
    
    [XmlAttribute]
    [DefaultValue(false)]
    public bool IsAssail
    {
        get
        {
            return _isAssail;
        }
        set
        {
            _isAssail = value;
        }
    }
    
    [XmlAttribute]
    [DefaultValue(true)]
    public bool Reflectable
    {
        get
        {
            return _reflectable;
        }
        set
        {
            _reflectable = value;
        }
    }
    
    private static XmlSerializer Serializer
    {
        get
        {
            if ((serializer == null))
            {
                serializer = new XmlSerializerFactory().CreateSerializer(typeof(Castable));
            }
            return serializer;
        }
    }
    
    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current Castable object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize()
    {
        StreamReader streamReader = null;
        MemoryStream memoryStream = null;
        try
        {
            memoryStream = new MemoryStream();
            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
            xmlWriterSettings.Indent = true;
            xmlWriterSettings.IndentChars = "  ";
            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
            Serializer.Serialize(xmlWriter, this);
            memoryStream.Seek(0, SeekOrigin.Begin);
            streamReader = new StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }
        finally
        {
            if ((streamReader != null))
            {
                streamReader.Dispose();
            }
            if ((memoryStream != null))
            {
                memoryStream.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes workflow markup into an Castable object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output Castable object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out Castable obj, out Exception exception)
    {
        exception = null;
        obj = default(Castable);
        try
        {
            obj = Deserialize(input);
            return true;
        }
        catch (Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool Deserialize(string input, out Castable obj)
    {
        Exception exception = null;
        return Deserialize(input, out obj, out exception);
    }
    
    public static Castable Deserialize(string input)
    {
        StringReader stringReader = null;
        try
        {
            stringReader = new StringReader(input);
            return ((Castable)(Serializer.Deserialize(XmlReader.Create(stringReader))));
        }
        finally
        {
            if ((stringReader != null))
            {
                stringReader.Dispose();
            }
        }
    }
    
    public static Castable Deserialize(Stream s)
    {
        return ((Castable)(Serializer.Deserialize(s)));
    }
    #endregion
    
    /// <summary>
    /// Serializes current Castable object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, out Exception exception)
    {
        exception = null;
        try
        {
            SaveToFile(fileName);
            return true;
        }
        catch (Exception e)
        {
            exception = e;
            return false;
        }
    }
    
    public virtual void SaveToFile(string fileName)
    {
        StreamWriter streamWriter = null;
        try
        {
            string xmlString = Serialize();
            FileInfo xmlFile = new FileInfo(fileName);
            streamWriter = xmlFile.CreateText();
            streamWriter.WriteLine(xmlString);
            streamWriter.Close();
        }
        finally
        {
            if ((streamWriter != null))
            {
                streamWriter.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes xml markup from file into an Castable object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output Castable object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, out Castable obj, out Exception exception)
    {
        exception = null;
        obj = default(Castable);
        try
        {
            obj = LoadFromFile(fileName);
            return true;
        }
        catch (Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool LoadFromFile(string fileName, out Castable obj)
    {
        Exception exception = null;
        return LoadFromFile(fileName, out obj, out exception);
    }
    
    public static Castable LoadFromFile(string fileName)
    {
        FileStream file = null;
        StreamReader sr = null;
        try
        {
            file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
            sr = new StreamReader(file);
            string xmlString = sr.ReadToEnd();
            sr.Close();
            file.Close();
            return Deserialize(xmlString);
        }
        finally
        {
            if ((file != null))
            {
                file.Dispose();
            }
            if ((sr != null))
            {
                sr.Dispose();
            }
        }
    }
}
}
#pragma warning restore
