/*
 * This file is part of Project Hybrasyl.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the Affero General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * without ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the Affero General Public License
 * for more details.
 *
 * You should have received a copy of the Affero General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * (C) 2013 Project Hybrasyl (info@hybrasyl.com)
 *
 * Authors:   Justin Baugh  <baughj@hybrasyl.com>
 *            Kyle Speck    <kojasou@hybrasyl.com>
 */

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ContextGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using Hybrasyl;

namespace Hybrasyl	
{
	public partial class DB : OpenAccessContext, IDBUnitOfWork
	{
		private static string connectionStringName = @"DarkagesConnection";
			
		private static BackendConfiguration backend = GetBackendConfiguration();
				
		private static MetadataSource metadataSource = new DBMetadataSource();
		
		public DB()
			:base(connectionStringName, backend, metadataSource)
		{ }
		
		public DB(string connection)
			:base(connection, backend, metadataSource)
		{ }
		
		public DB(BackendConfiguration backendConfiguration)
			:base(connectionStringName, backendConfiguration, metadataSource)
		{ }
			
		public DB(string connection, MetadataSource metadataSource)
			:base(connection, backend, metadataSource)
		{ }
		
		public DB(string connection, BackendConfiguration backendConfiguration, MetadataSource metadataSource)
			:base(connection, backendConfiguration, metadataSource)
		{ }
			
		public IQueryable<worldwarps> worldwarps 
		{
			get
			{
				return this.GetAll<worldwarps>();
			}
		}
		
		public IQueryable<worldmaps> worldmaps 
		{
			get
			{
				return this.GetAll<worldmaps>();
			}
		}
		
		public IQueryable<worldmap_points> worldmap_points 
		{
			get
			{
				return this.GetAll<worldmap_points>();
			}
		}
		
		public IQueryable<warps> warps 
		{
			get
			{
				return this.GetAll<warps>();
			}
		}
		
		public IQueryable<tags> tags 
		{
			get
			{
				return this.GetAll<tags>();
			}
		}
		
		public IQueryable<taggings> taggings 
		{
			get
			{
				return this.GetAll<taggings>();
			}
		}
		
		public IQueryable<spells> spells 
		{
			get
			{
				return this.GetAll<spells>();
			}
		}
		
		public IQueryable<spawns> spawns 
		{
			get
			{
				return this.GetAll<spawns>();
			}
		}
		
		public IQueryable<spawn_points> spawn_points 
		{
			get
			{
				return this.GetAll<spawn_points>();
			}
		}
		
		public IQueryable<skills> skills 
		{
			get
			{
				return this.GetAll<skills>();
			}
		}
		
		public IQueryable<signposts> signposts 
		{
			get
			{
				return this.GetAll<signposts>();
			}
		}
		
		public IQueryable<schema_migrations> schema_migrations 
		{
			get
			{
				return this.GetAll<schema_migrations>();
			}
		}
		
		public IQueryable<reactors> reactors 
		{
			get
			{
				return this.GetAll<reactors>();
			}
		}
		
		public IQueryable<players> players 
		{
			get
			{
				return this.GetAll<players>();
			}
		}
		
		public IQueryable<npcs> npcs 
		{
			get
			{
				return this.GetAll<npcs>();
			}
		}
		
		public IQueryable<news_posts> news_posts 
		{
			get
			{
				return this.GetAll<news_posts>();
			}
		}
		
		public IQueryable<nations> nations 
		{
			get
			{
				return this.GetAll<nations>();
			}
		}
		
		public IQueryable<mobs> mobs 
		{
			get
			{
				return this.GetAll<mobs>();
			}
		}
		
		public IQueryable<messages> messages 
		{
			get
			{
				return this.GetAll<messages>();
			}
		}
		
		public IQueryable<maps> maps 
		{
			get
			{
				return this.GetAll<maps>();
			}
		}
		
		public IQueryable<legend_marks> legend_marks 
		{
			get
			{
				return this.GetAll<legend_marks>();
			}
		}
		
		public IQueryable<items> items 
		{
			get
			{
				return this.GetAll<items>();
			}
		}
		
		public IQueryable<item_variants_items> item_variants_items 
		{
			get
			{
				return this.GetAll<item_variants_items>();
			}
		}
		
		public IQueryable<item_variants> item_variants 
		{
			get
			{
				return this.GetAll<item_variants>();
			}
		}
		
		public IQueryable<flags_players> flags_players 
		{
			get
			{
				return this.GetAll<flags_players>();
			}
		}
		
		public IQueryable<flags> flags 
		{
			get
			{
				return this.GetAll<flags>();
			}
		}
		
		public IQueryable<drops_mobs> drops_mobs 
		{
			get
			{
				return this.GetAll<drops_mobs>();
			}
		}
		
		public IQueryable<drops_item_variants> drops_item_variants 
		{
			get
			{
				return this.GetAll<drops_item_variants>();
			}
		}
		
		public IQueryable<drops> drops 
		{
			get
			{
				return this.GetAll<drops>();
			}
		}
		
		public IQueryable<drop_sets_mobs> drop_sets_mobs 
		{
			get
			{
				return this.GetAll<drop_sets_mobs>();
			}
		}
		
		public IQueryable<drop_sets_drops> drop_sets_drops 
		{
			get
			{
				return this.GetAll<drop_sets_drops>();
			}
		}
		
		public IQueryable<drop_sets> drop_sets 
		{
			get
			{
				return this.GetAll<drop_sets>();
			}
		}
		
		public IQueryable<boards> boards 
		{
			get
			{
				return this.GetAll<boards>();
			}
		}
		
		public IQueryable<board_messages> board_messages 
		{
			get
			{
				return this.GetAll<board_messages>();
			}
		}
		
		public IQueryable<api_keys> api_keys 
		{
			get
			{
				return this.GetAll<api_keys>();
			}
		}
		
		public IQueryable<active_admin_comments> active_admin_comments 
		{
			get
			{
				return this.GetAll<active_admin_comments>();
			}
		}
		
		public IQueryable<accounts> accounts 
		{
			get
			{
				return this.GetAll<accounts>();
			}
		}
		
		public static BackendConfiguration GetBackendConfiguration()
		{
			BackendConfiguration backend = new BackendConfiguration();
			backend.Backend = "MySql";
			backend.ProviderName = "MySql.Data.MySqlClient";
		
			CustomizeBackendConfiguration(ref backend);
		
			return backend;
		}
		
		/// <summary>
		/// Allows you to customize the BackendConfiguration of DB.
		/// </summary>
		/// <param name="config">The BackendConfiguration of DB.</param>
		static partial void CustomizeBackendConfiguration(ref BackendConfiguration config);
		
	}
	
	public interface IDBUnitOfWork : IUnitOfWork
	{
		IQueryable<worldwarps> worldwarps
		{
			get;
		}
		IQueryable<worldmaps> worldmaps
		{
			get;
		}
		IQueryable<worldmap_points> worldmap_points
		{
			get;
		}
		IQueryable<warps> warps
		{
			get;
		}
		IQueryable<tags> tags
		{
			get;
		}
		IQueryable<taggings> taggings
		{
			get;
		}
		IQueryable<spells> spells
		{
			get;
		}
		IQueryable<spawns> spawns
		{
			get;
		}
		IQueryable<spawn_points> spawn_points
		{
			get;
		}
		IQueryable<skills> skills
		{
			get;
		}
		IQueryable<signposts> signposts
		{
			get;
		}
		IQueryable<schema_migrations> schema_migrations
		{
			get;
		}
		IQueryable<reactors> reactors
		{
			get;
		}
		IQueryable<players> players
		{
			get;
		}
		IQueryable<npcs> npcs
		{
			get;
		}
		IQueryable<news_posts> news_posts
		{
			get;
		}
		IQueryable<nations> nations
		{
			get;
		}
		IQueryable<mobs> mobs
		{
			get;
		}
		IQueryable<messages> messages
		{
			get;
		}
		IQueryable<maps> maps
		{
			get;
		}
		IQueryable<legend_marks> legend_marks
		{
			get;
		}
		IQueryable<items> items
		{
			get;
		}
		IQueryable<item_variants_items> item_variants_items
		{
			get;
		}
		IQueryable<item_variants> item_variants
		{
			get;
		}
		IQueryable<flags_players> flags_players
		{
			get;
		}
		IQueryable<flags> flags
		{
			get;
		}
		IQueryable<drops_mobs> drops_mobs
		{
			get;
		}
		IQueryable<drops_item_variants> drops_item_variants
		{
			get;
		}
		IQueryable<drops> drops
		{
			get;
		}
		IQueryable<drop_sets_mobs> drop_sets_mobs
		{
			get;
		}
		IQueryable<drop_sets_drops> drop_sets_drops
		{
			get;
		}
		IQueryable<drop_sets> drop_sets
		{
			get;
		}
		IQueryable<boards> boards
		{
			get;
		}
		IQueryable<board_messages> board_messages
		{
			get;
		}
		IQueryable<api_keys> api_keys
		{
			get;
		}
		IQueryable<active_admin_comments> active_admin_comments
		{
			get;
		}
		IQueryable<accounts> accounts
		{
			get;
		}
	}
}
#pragma warning restore 1591
